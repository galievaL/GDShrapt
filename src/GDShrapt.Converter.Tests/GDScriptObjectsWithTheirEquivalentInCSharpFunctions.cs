using System.Collections.Generic;

namespace GDShrapt.Converter.Tests
{
    public static class GDScriptObjectsWithTheirEquivalentInCSharpFunctions
    {
        public static Dictionary<string, (string csharpEquivalent, CustomSyntaxKind returnTypes)> GDScriptVariantTypesToLower2 = new Dictionary<string, (string, CustomSyntaxKind)>()
        {
            ["nil"] = ("null", CustomSyntaxKind.NullKeyword),
            ["bool"] = ("bool", CustomSyntaxKind.BoolKeyword),
            ["int"] = ("long", CustomSyntaxKind.LongKeyword),
            ["float"] = ("double", CustomSyntaxKind.DoubleKeyword),
            ["string"] = ("string", CustomSyntaxKind.StringKeyword),
            ["vector2"] = ("Vector2", CustomSyntaxKind.Vector2), 
            ["vector2i"] = ("Vector2I", CustomSyntaxKind.Vector2I),
            ["rect2"] = ("Rect2", CustomSyntaxKind.Rect2),
            ["rect2i"] = ("Rect2I", CustomSyntaxKind.Rect2I),
            ["vector3"] = ("Vector3", CustomSyntaxKind.Vector3),
            ["vector3i"] = ("Vector3I", CustomSyntaxKind.Vector3I),
            ["transform2d"] = ("Transform2D", CustomSyntaxKind.Transform2D),
            ["vector4"] = ("Vector4", CustomSyntaxKind.Vector4),
            ["vector4i"] = ("Vector4I", CustomSyntaxKind.Vector4I),
            ["plane"] = ("Plane", CustomSyntaxKind.Plane),
            ["quaternion"] = ("Quaternion", CustomSyntaxKind.Quaternion),
            ["aabb"] = ("Aabb", CustomSyntaxKind.Aabb),
            ["basis"] = ("Basis", CustomSyntaxKind.Basis),
            ["transform3d"] = ("Transform3D", CustomSyntaxKind.Transform3D),
            ["projection"] = ("Projection", CustomSyntaxKind.Projection),
            ["color"] = ("Color", CustomSyntaxKind.Color),
            ["stringname"] = ("StringName", CustomSyntaxKind.StringName),
            ["nodepath"] = ("NodePath", CustomSyntaxKind.NodePath),
            ["rid"] = ("Rid", CustomSyntaxKind.Rid),
            ["object"] = ("GodotObject", CustomSyntaxKind.GodotObject),
            ["callable"] = ("Callable", CustomSyntaxKind.Callable),
            ["signal"] = ("Signal", CustomSyntaxKind.Signal),
            ["dictionary"] = ("Collections.Dictionary", CustomSyntaxKind.CollectionsDictionary),
            ["array"] = ("Collections.Array", CustomSyntaxKind.CollectionsArray),
            ["packedbytearray"] = ("byte[]", CustomSyntaxKind.ByteArray),
            ["packedint32array"] = ("int[]", CustomSyntaxKind.IntArray),
            ["packedint64array"] = ("long[]", CustomSyntaxKind.LongArray),
            ["packedfloat32array"] = ("float[]", CustomSyntaxKind.FloatArray),
            ["packedfloat64array"] = ("double[]", CustomSyntaxKind.DoubleArray),
            ["packedstringarray"] = ("string[]", CustomSyntaxKind.StringArray),
            ["packedvector2array"] = ("Vector2[]", CustomSyntaxKind.Vector2Array),
            ["packedvector3array"] = ("Vector3[]", CustomSyntaxKind.Vector3Array),
            ["packedcolorarray"] = ("Color[]", CustomSyntaxKind.ColorArray)
        };

        public static Dictionary<string, (string csharpEquivalent, CustomSyntaxKind returnTypes)> GDScriptConstsToLower_TheirEquivalentAndReturnTypes = new Dictionary<string, (string, CustomSyntaxKind)>()
        {
            ["pi"] = ("Mathf.Pi", CustomSyntaxKind.DoubleKeyword),
            ["tau"] = ("Mathf.Tau", CustomSyntaxKind.DoubleKeyword),
            ["inf"] = ("Mathf.Inf", CustomSyntaxKind.DoubleKeyword),
            ["nan"] = ("Mathf.NaN", CustomSyntaxKind.DoubleKeyword)
        };

        public static Dictionary<string, (string csharpEquivalent, CustomSyntaxKind returnTypes)> GDScriptGlobalScopeFunctions = new Dictionary<string, (string, CustomSyntaxKind)>
        {
            ["abs"] = ("Mathf.Abs", CustomSyntaxKind.DoubleKeyword),
            ["absf"] = ("Mathf.Abs", CustomSyntaxKind.DoubleKeyword),
            ["absi"] = ("Mathf.Abs", CustomSyntaxKind.LongKeyword),
            ["acos"] = ("Mathf.Acos", CustomSyntaxKind.DoubleKeyword),
            ["asin"] = ("Mathf.Asin", CustomSyntaxKind.DoubleKeyword),
            ["atan"] = ("Mathf.Atan", CustomSyntaxKind.DoubleKeyword),
            ["atan2"] = ("Mathf.Atan2", CustomSyntaxKind.DoubleKeyword),
            ["bezier_derivative"] = ("Mathf.BezierDerivative", CustomSyntaxKind.DoubleKeyword),
            ["bezier_interpolate"] = ("Mathf.BezierInterpolate", CustomSyntaxKind.DoubleKeyword),
            ["bytes_to_var"] = ("GD.BytesToVar", CustomSyntaxKind.ObjectKeyword),
            ["bytes_to_var_with_objects"] = ("GD.BytesToVarWithObjects", CustomSyntaxKind.ObjectKeyword),
            ["ceil"] = ("Mathf.Ceil", CustomSyntaxKind.DoubleKeyword),
            ["ceilf"] = ("Mathf.Ceil", CustomSyntaxKind.DoubleKeyword),
            ["ceili"] = ("Mathf.CeilToInt", CustomSyntaxKind.LongKeyword),
            ["clamp"] = ("Mathf.Clamp", CustomSyntaxKind.DoubleKeyword),
            ["clampf"] = ("Mathf.Clamp", CustomSyntaxKind.DoubleKeyword),
            ["clampi"] = ("Mathf.Clamp", CustomSyntaxKind.LongKeyword),
            ["cos"] = ("Mathf.Cos", CustomSyntaxKind.DoubleKeyword),
            ["cosh"] = ("Mathf.Cosh", CustomSyntaxKind.DoubleKeyword),
            ["cubic_interpolate"] = ("Mathf.CubicInterpolate", CustomSyntaxKind.DoubleKeyword),
            ["cubic_interpoalte_angle"] = ("Mathf.CubicInterpolateAngle", CustomSyntaxKind.DoubleKeyword),
            ["cubic_interpolate_angle_in_time"] = ("Mathf.CubicInterpolateInTime", CustomSyntaxKind.DoubleKeyword),
            ["cubic_interpolate_in_time"] = ("Mathf.CubicInterpolateAngleInTime", CustomSyntaxKind.DoubleKeyword),
            ["db_to_linear"] = ("Mathf.DbToLinear", CustomSyntaxKind.DoubleKeyword),
            ["deg_to_rad"] = ("Mathf.DegToRad", CustomSyntaxKind.DoubleKeyword),
            ["ease"] = ("Mathf.Ease", CustomSyntaxKind.DoubleKeyword),
            ["error_string"] = ("Error.ToString", CustomSyntaxKind.StringKeyword),
            ["exp"] = ("Mathf.Exp", CustomSyntaxKind.DoubleKeyword),
            ["floor"] = ("Mathf.Floor", CustomSyntaxKind.DoubleKeyword),
            ["floorf"] = ("Mathf.Floor", CustomSyntaxKind.DoubleKeyword),
            ["floori"] = ("Mathf.FloorToInt", CustomSyntaxKind.LongKeyword),
            ["fposmod"] = ("Mathf.PosMod", CustomSyntaxKind.DoubleKeyword),
            ["hash"] = ("GD.Hash", CustomSyntaxKind.LongKeyword),
            ["instance_from_id"] = ("GodotObject.InstanceFromId", CustomSyntaxKind.ObjectKeyword),
            ["inverse_lerp"] = ("Mathf.InverseLerp", CustomSyntaxKind.DoubleKeyword),
            ["is_equal_approx"] = ("Mathf.IsEqualApprox", CustomSyntaxKind.BoolKeyword),
            ["is_finite"] = ("Mathf.IsFinite", CustomSyntaxKind.BoolKeyword),
            ["is_inf"] = ("Mathf.IsInf", CustomSyntaxKind.BoolKeyword),
            ["is_instance_id_valid"] = ("GodotObject.IsInstanceIdValid", CustomSyntaxKind.BoolKeyword),
            ["is_instance_valid"] = ("GodotObject.IsInstanceValid", CustomSyntaxKind.BoolKeyword),
            ["is_nan"] = ("Mathf.IsNaN", CustomSyntaxKind.BoolKeyword),
            ["is_same"] = ("object.ReferenceEquals", CustomSyntaxKind.BoolKeyword),
            ["is_zero_approx"] = ("Mathf.IsZeroApprox", CustomSyntaxKind.BoolKeyword),
            ["lerp"] = ("Mathf.Lerp", CustomSyntaxKind.DoubleKeyword),
            ["lerp_angle"] = ("Mathf.LerpAngle", CustomSyntaxKind.DoubleKeyword),
            ["lerpf"] = ("Mathf.Lerp", CustomSyntaxKind.DoubleKeyword),
            ["linear_to_db"] = ("Mathf.LinearToDb", CustomSyntaxKind.DoubleKeyword),
            ["log"] = ("Mathf.Log", CustomSyntaxKind.DoubleKeyword),
            ["max"] = ("Mathf.Max", CustomSyntaxKind.DoubleKeyword),
            ["maxf"] = ("Mathf.Max", CustomSyntaxKind.DoubleKeyword),
            ["maxi"] = ("Mathf.Max", CustomSyntaxKind.LongKeyword),
            ["min"] = ("Mathf.Min", CustomSyntaxKind.DoubleKeyword),
            ["minf"] = ("Mathf.Min", CustomSyntaxKind.DoubleKeyword),
            ["mini"] = ("Mathf.Min", CustomSyntaxKind.LongKeyword),
            ["move_toward"] = ("Mathf.MoveToward", CustomSyntaxKind.DoubleKeyword),
            ["nearest_po2"] = ("Mathf.NearestPo2", CustomSyntaxKind.LongKeyword),
            ["pingpong"] = ("Mathf.PingPong", CustomSyntaxKind.DoubleKeyword),
            ["posmod"] = ("Mathf.PosMod", CustomSyntaxKind.DoubleKeyword),
            ["pow"] = ("Mathf.Pow", CustomSyntaxKind.DoubleKeyword),
            ["print"] = ("GD.Print", CustomSyntaxKind.VoidKeyword),
            ["print_rich"] = ("GD.PrintRich", CustomSyntaxKind.VoidKeyword),
            ["print_verbose"] = ("GD.Print", CustomSyntaxKind.VoidKeyword),
            ["printerr"] = ("GD.PrintErr", CustomSyntaxKind.VoidKeyword),
            ["printraw"] = ("GD.PrintRaw", CustomSyntaxKind.VoidKeyword),
            ["prints"] = ("GD.PrintS", CustomSyntaxKind.VoidKeyword),
            ["printt"] = ("GD.PrintT", CustomSyntaxKind.VoidKeyword),
            ["push_error"] = ("GD.PushError", CustomSyntaxKind.VoidKeyword),
            ["push_warning"] = ("GD.PushWarning", CustomSyntaxKind.VoidKeyword),
            ["rad_to_deg"] = ("Mathf.RadToDeg", CustomSyntaxKind.DoubleKeyword),
            ["rand_from_seed"] = ("GD.RandFromSeed", CustomSyntaxKind.DoubleKeyword),
            ["randf"] = ("GD.Randf", CustomSyntaxKind.DoubleKeyword),
            ["randf_range"] = ("GD.RandRange", CustomSyntaxKind.DoubleKeyword),
            ["randfn"] = ("GD.Randfn", CustomSyntaxKind.DoubleKeyword),
            ["randi"] = ("GD.Randi", CustomSyntaxKind.LongKeyword),
            ["randi_range"] = ("GD.RandRange", CustomSyntaxKind.LongKeyword),
            ["randomize"] = ("GD.Randomize", CustomSyntaxKind.VoidKeyword),
            ["remap"] = ("Mathf.Remap", CustomSyntaxKind.DoubleKeyword),
            ["round"] = ("Mathf.Round", CustomSyntaxKind.DoubleKeyword),
            ["roundf"] = ("Mathf.Round", CustomSyntaxKind.DoubleKeyword),
            ["roundi"] = ("Mathf.RoundToInt", CustomSyntaxKind.LongKeyword),
            ["seed"] = ("GD.Seed", CustomSyntaxKind.VoidKeyword),
            ["sign"] = ("Mathf.Sign", CustomSyntaxKind.DoubleKeyword),
            ["signf"] = ("Mathf.Sign", CustomSyntaxKind.DoubleKeyword),
            ["signi"] = ("Mathf.Sign", CustomSyntaxKind.LongKeyword),
            ["sin"] = ("Mathf.Sin", CustomSyntaxKind.DoubleKeyword),
            ["sinh"] = ("Mathf.Sinh", CustomSyntaxKind.DoubleKeyword),
            ["smoothstep"] = ("Mathf.SmoothStep", CustomSyntaxKind.DoubleKeyword),
            ["snapped"] = ("Mathf.Snapped", CustomSyntaxKind.DoubleKeyword),
            ["snappedf"] = ("Mathf.Snapped", CustomSyntaxKind.DoubleKeyword),
            ["snappedi"] = ("Mathf.Snapped", CustomSyntaxKind.LongKeyword),
            ["sqrt"] = ("Mathf.Sqrt", CustomSyntaxKind.DoubleKeyword),
            ["step_decimals"] = ("Mathf.StepDecimals", CustomSyntaxKind.LongKeyword),
            ["str_to_var"] = ("GD.StrToVar", CustomSyntaxKind.ObjectKeyword),
            ["tan"] = ("Mathf.Tan", CustomSyntaxKind.DoubleKeyword),
            ["tanh"] = ("Mathf.Tanh", CustomSyntaxKind.DoubleKeyword),
            ["typeof"] = ("Variant.VariantType", CustomSyntaxKind.TypeKeyword),
            ["var_to_str"] = ("GD.VarToStr", CustomSyntaxKind.StringKeyword),
            ["wrap"] = ("Mathf.Wrap", CustomSyntaxKind.DoubleKeyword),
            ["wrapf"] = ("Mathf.Wrap", CustomSyntaxKind.DoubleKeyword),
            ["wrapi"] = ("Mathf.Wrap", CustomSyntaxKind.LongKeyword),
            ["var_to_bytes"] = ("GD.VarToBytes", CustomSyntaxKind.ByteArray),
            ["var_to_bytes_with_objects"] = ("GD.VarToBytesWithObjects", CustomSyntaxKind.ByteArray),
            ["weakref"] = ("GodotObject.WeakRef", CustomSyntaxKind.WeakRef),
        };

        public static Dictionary<string, (string csharpEquivalent, CustomSyntaxKind returnTypes)> GDScriptGlobalScopeFunctions_NAequivalent = new Dictionary<string, (string, CustomSyntaxKind)>
        {
            ["rid_allocate_id"] = ("rid_allocate_id", CustomSyntaxKind.Rid),
            ["rid_from_int64"] = ("rid_from_int64", CustomSyntaxKind.Rid),
            ["fmod"] = ("fmod", CustomSyntaxKind.DoubleKeyword),
            ["str"] = ("str", CustomSyntaxKind.StringKeyword)
        };

        public static Dictionary<string, (string csharpEquivalent, CustomSyntaxKind returnTypes)> GDScriptUtilityFunctions = new Dictionary<string, (string, CustomSyntaxKind)>
        {
            ["assert"] = ("System.Diagnostics.Debug.Assert", CustomSyntaxKind.VoidKeyword),
            ["convert"] = ("GD.Convert", CustomSyntaxKind.ObjectKeyword),
            ["get_stack"] = ("System.Environment.StackTrace", CustomSyntaxKind.StringKeyword),
            ["print_stack"] = ("GD.Print(System.Environment.StackTrace)", CustomSyntaxKind.VoidKeyword),
            ["type_exists"] = ("ClassDB.ClassExists(type)", CustomSyntaxKind.BoolKeyword),
            ["load"] = ("GD.Load", CustomSyntaxKind.Resource),
            ["preload"] = ("GD.Load", CustomSyntaxKind.Resource),
            ["range"] = ("GD.Range", CustomSyntaxKind.IEnumerable),
        };

        public static Dictionary<string, (string csharpEquivalent, CustomSyntaxKind returnTypes)> GDScriptUtilityFunctions_NAequivalen = new Dictionary<string, (string, CustomSyntaxKind)>
        {
            ["dict_to_inst"] = ("dict_to_inst", CustomSyntaxKind.ObjectKeyword),
            ["print_debug"] = ("print_debug", CustomSyntaxKind.VoidKeyword),
            ["len"] = ("len", CustomSyntaxKind.LongKeyword),
            ["inst_to_dict"] = ("inst_to_dict", CustomSyntaxKind.Dictionary),
            ["char"] = ("char", CustomSyntaxKind.CharKeyword),
            ["float"] = ("float", CustomSyntaxKind.DoubleKeyword)
        };
    }
}
